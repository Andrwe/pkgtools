#!/bin/bash

#TODO: Use ACTIONS=() as in pkgfile
#TODO: Add --abs
#TODO: Perhaps an --append option, to add files to an existing dir. Currently you can do it but it's clunky
#      Should be easier with ACTIONS, since copying pkgbuild will no longer be default.

CONTRIB_INFO='Your Name <youremail@domain.com>'
BASEDIR="${HOME}/builds"

###
# Lines below this point should not need to be edited.
##
MYVERSION=4.0
PROGNAME="$(basename $0)"

PROTODIR='/usr/share/pacman'

ACTIONS=()       # Better than $DOFOO TODO
#ACTIONS=(pkgbuild installfile rcd abs)
DOCOPYPKGBUILD=1 # Copy the prototype PKGBUILD
DOCOPYINSTALL=0  # Copy the .install file
DOABS=0          # Copy from ABS instead of normal operation TODO
ABSROOT='/var/abs'
DOCOPYRC=0       # Copy the prototype rc.d script
DOFORCE=0        # Overwrite existing files

PROTO_PKGBUILD="${PROTODIR}/PKGBUILD.proto"
PROTO_INSTALL="${PROTODIR}/proto.install"
PROTO_RC="${PROTODIR}/rc-script.proto"

if [ -r /etc/pkgtools/newpkg.conf ]; then
        source /etc/pkgtools/newpkg.conf
else
       die 1 "Unable to source global config file at /etc/pkgtools/newpkg.conf"
fi
if [ -r "${HOME}/.pkgtools/newpkg.conf" ]; then
        source "${HOME}/.pkgtools/newpkg.conf"
fi

# {{{ usage()
function usage {
    msg "%s version %s -- A script to speed up creating new PKGBUILDs\n" "$PROGNAME" "$MYVERSION"
    msg "Usage: %s [options] PKGNAME\n" "$PROGNAME"
    msg "Options:\n"
    msg "    -h --help          - Print this usage\n"
    msg "    -f --force         - Overwrite existing files in the target dir\n"
    msg "    -i --install-file  - Copy the prototype .install file\n"
    msg "    --rc               - Copy the protype for an rc.d script\n"
    msg "    -p --pkgbuild      - Specify the PKGBUILD file. If not absolute, the\n"
    msg "                         filename is relative to %s.\n" "$PROGNAME"
    msg "                         Use '-' to not copy any PKGBUILD\n"
    msg "    --cvs              - Create a cvs PKGBUILD\n"
    msg "    --darcs            - Create a darcs PKGBUILD\n"
    msg "    --git              - Create a git PKGBUILD\n"
    msg "    --svn              - Create a svn PKGBUILD\n"
    exit 0
}
# }}}

# {{{  die() warn() quit() msg()
die () {
        #set -x
        local ret=$1; 
        local warning="$2"; shift 2
        warn "${warning:-Unknown error}" "$@"
        quit ${ret:-1}
}

warn () {
        #set -x
        local message="$1"; shift
        printf "$message" "$@" 1>&2
        #set +x
}

quit () {
        exit ${1:-0}
}

msg  () {
        local message="$1"
        shift
        printf "$message" $@
}
# }}}

# setpkgbuild() {{{
setpkgbuild () {
        if [ -z "$1" ]; then
                die 1 "setpkgbuild() requires an argument!"
        fi
        case "$1" in
                -)
                        DOCOPYPKGBUILD=0
                        ;;
                /*)
                        PROTO_PKGBUILD="$1"
                        ;;
                *)
                        PROTO_PKGBUILD="${PROTODIR}/$1"
                        ;;
        esac
}
# }}}

# maketargetdir() {{{
maketargetdir () {
        if [ -d "$pkgdir" ]; then
                if [ "$DOFORCE" -eq 1 ]; then
                        warn "%s already exists in %s -- continuing anyway!\n" $pkgname $BASEDIR 
                else
                        die 1 "%s already exists in %s -- aborting\n" $pkgname $BASEDIR
                fi
        else
                mkdir -p "$pkgdir" || die 1 "Unable to create directory %s" "$pkgdir"
                msg "Creating package dir for %s\n" $pkgname
        fi
}
# }}}

# copypkgbuild() {{{
copypkgbuild () {
        if [ -r "$PROTO_PKGBUILD" ]; then
                msg "Copying prototype PKGBUILD\n"
                cp "$PROTO_PKGBUILD" ./PKGBUILD || die 1 "Unable to copy PKGBUILD prototype\n"
                sed -i "s#^pkgname=.*#pkgname=$pkgname#" PKGBUILD

                sed -i '/^# This is an example PKGBUILD/d' PKGBUILD
                sed -i '/^# and remove these comments/d' PKGBUILD
                sed -i '/^# NOTE: Please fill out/d' PKGBUILD
                sed -i '/^# then please put/d' PKGBUILD

                sed -i "s/^# Contributor: .*/# Contributor: $CONTRIB_INFO/" PKGBUILD
        else
                warn "Could not find prototype PKGBUILD '%s'\n" "$PROTO_PKGBUILD"
        fi
}
# }}}

# copyinstallfile() {{{
copyinstallfile () {
        if [ -r "$PROTO_INSTALL" ]; then 
                msg "Copying prototype .install file\n"
                cp "$PROTO_INSTALL" "./${pkgname}.install"
                if [ -w PKGBUILD ]; then
                        sed -i "s#^install=.*#install='${pkgname}.install'#" PKGBUILD
                fi
        else
                warn "Could not find prototype .install\n"
        fi
}
# }}}

# copyrcd() {{{
copyrcd () {
        if [ -r "$PROTO_RC" ]; then 
                msg "Copying prototype rc.d script\n"
                cp "$PROTO_RC" "./${pkgname}.rc.d"
                sed -i "s#daemon_name=.*#daemon_name=$pkgname#" "${pkgname}.rc.d"
                if [ -w PKGBUILD ]; then
                        sed -i "s#^source=(\(.*\))#source=(\1 ${pkgname}.rc.d)#" PKGBUILD
                fi
        else
                warn "Could not find prototype rc.d script\n"
        fi
}
# }}}

if [ -z "$1" ]; then
        usage
fi

while [ "$#" -ne 0 ]; do
        case $1 in
                -h|--help) 
                        usage
                        ;;
                -i|--install-file)     
                        DOCOPYINSTALL=1
                        ;;
                --rc)
                        DOCOPYRC=1
                        ;;
                -f|--force)
                        DOFORCE=1
                        ;;
                -p|--pkgbuild)
                        if [ -z "$2" ]; then
                                die 1 "%s %s option requires a parameter!\n" "$PROGNAME" "$1"
                        fi
                        setpkgbuild "$2"; shift
                        ;;
                --cvs)
                        setpkgbuild "PKGBUILD-cvs.proto"
                        ;;
                --darcs)
                        setpkgbuild "PKGBUILD-darcs.proto"
                        ;;
                --git)
                        setpkgbuild "PKGBUILD-git.proto"
                        ;;
                --svn)
                        setpkgbuild "PKGBUILD-svn.proto"
                        ;;
                -*)
                        die 1 "Unrecognized option %s\n" "$1"
                        ;;
                *)      
                        pkgname=$(echo $1 | sed 's; ;;g' | sed 's;/$;;')
                        ;;
        esac
        shift
done

pkgdir="${BASEDIR}/${pkgname}"

maketargetdir
cd "$pkgdir" || die 1 "Unable to change directory to %s\n" "$pkgdir"

if [ "$DOCOPYPKGBUILD" -eq 1 ]; then
        copypkgbuild 
fi

if [ "$DOCOPYINSTALL" -eq 1 ]; then
        copyinstallfile
fi

if [ "$DOCOPYRC" -eq 1 ]; then
        copyrcd
fi

msg "All done! New package prepared in %s\n" $pkgdir
quit 0
# vim: set ts=8 fdm=marker et:
